from BSTree import BSTree
myT = BSTree()
myT.addATreeNode(15)
myT.addATreeNode(12)
myT.addATreeNode(25)
myT.addATreeNode(10)
myT.addATreeNode(18)
myT.addATreeNode(30)
myT.addATreeNode(7)
myT.addATreeNode(5)
myT.addATreeNode(11)
myT.addATreeNode(27)
myT.addATreeNode(5)
myT.addATreeNode(6)
myT.addATreeNode(2)
myT.addATreeNode(29)
myT.addATreeNode(14)
myT.addATreeNode(13)
myT.inOrder(myT.root)
print("\nPreOrder---")
myT.preOrder(myT.root)
print("\nPostOrder---")
myT.postOrder(myT.root)
print("\n---BFS---")
myT.breadthFirstTraversal()
print("\n")
# print(f"\nNumber of nodes: {myT.countTreeNodes()}")
# print(f"Number of nodes V2: {myT.countTreeNodesDFS(myT.root)}")
# print(f"Number of nodes have two children: {myT.countNodesHasTwoChildren()}")
# print(f"Number of nodes have a left child: {myT.countNodesHasOnlyLeftChild()}")
# print(f"Number of nodes have a right child: {myT.countNodesHasOnlyRightChild()}")
# print(f"Number of internal nodes: {myT.countInternalNodes()}")
# print(f"Number of external nodes: {myT.countExternalNode()}")
# x=int(input("Input threshold x = "))
# print(f"Number of nodes with value greater than {x}: {myT.countNodesAboveThreshold(x)}")
# print("\nDelete by Copying at the left subtree")
# x=int(input("Input value to delete x = "))
# myT.root=myT.deleteByCopyingLeftSide(myT.root, x)
# myT.breadthFirstTraversal()
# print("\nDelete by Copying at the right subtree")
# x=int(input("Input value to delete x = "))
# myT.root=myT.deleteByCopyingRightSide(myT.root,x)
# myT.breadthFirstTraversal()
print("\nDelete by Merging")
x=int(input("Input value to delete x = "))
myT.root=myT.deleteByMerging(myT.root,x)
myT.breadthFirstTraversal()